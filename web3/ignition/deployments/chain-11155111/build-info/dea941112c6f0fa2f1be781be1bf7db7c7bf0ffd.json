{
  "_format": "hh3-sol-build-info-1",
  "id": "dea941112c6f0fa2f1be781be1bf7db7c7bf0ffd",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/FundingPool.sol": "project/contracts/FundingPool.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.3.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.3.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.3.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "project/contracts/FundingPool.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport \"./interfaces/IFundingPool.sol\";\r\n\r\nimport \"./modules/FundingPoolEvents.sol\";\r\nimport \"./modules/FundingPoolErrors.sol\";\r\nimport \"./modules/FundingPoolStorage.sol\";\r\n\r\n/// @title FundingPool - A fair, time-weighted lending pool for multiple borrowers and funders using stablecoin\r\ncontract FundingPool is IFundingPool, FundingPoolStorage {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Precision for time-weighted accounting\r\n    uint256 public constant ACC_PRECISION = 1e18;\r\n\r\n    /// @notice Deploy the FundingPool with the stablecoin token address\r\n    /// @param stablecoinAddress The address of the ERC20 stablecoin contract\r\n    constructor(address stablecoinAddress) {\r\n        deployer = msg.sender;\r\n        stablecoin = IERC20(stablecoinAddress);\r\n    }\r\n\r\n    /// @dev Restricts function to only deployer address\r\n    modifier onlyDeployer() {\r\n        require(msg.sender == deployer, \"Only deployer can call this\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Restricts function to only backend addresses\r\n    modifier onlyBackend() {\r\n        require(_isBackend(msg.sender), \"Only backend can authorize\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Updates the funder's accrued interest and sets their interestDebt\r\n    modifier updateFunder(address funderAddr) {\r\n        _updateFunderInterest(funderAddr);\r\n        _;\r\n    }\r\n\r\n    /// @notice Set the list of backend addresses (only deployer)\r\n    function setBackends(address[] calldata newBackends) external onlyDeployer {\r\n        backends = newBackends;\r\n    }\r\n\r\n    // @notice Get the list of backend addresses\r\n    function getBackends() external view returns (address[] memory) {\r\n        return backends;\r\n    }\r\n\r\n    /// @notice Set the USDC wallet address (only deployer)\r\n    function setUsdcWallet(address newUsdcWallet) external onlyDeployer {\r\n        usdcWallet = newUsdcWallet;\r\n    }\r\n\r\n    /// @notice Deposit stablecoin to become a funder\r\n    /// @param amount The amount to deposit\r\n    function depositPrincipal(uint256 amount) external updateFunder(msg.sender) {\r\n        if (amount == 0) revert ZeroAmount();\r\n        \r\n        Funder storage funder = funders[msg.sender];\r\n        if (funder.principal == 0) {\r\n            funderList.push(msg.sender);\r\n        }\r\n        \r\n        stablecoin.safeTransferFrom(msg.sender, address(this), amount);\r\n        funder.principal += amount;\r\n        totalPrincipal += amount;\r\n        \r\n        emit Deposited(msg.sender, amount);\r\n    }\r\n\r\n    /// @notice Withdraw principal (original deposit)\r\n    function withdrawPrincipal() external updateFunder(msg.sender) {\r\n        Funder storage funder = funders[msg.sender];\r\n        uint256 amount = funder.principal;\r\n        if (amount == 0) revert NothingToWithdraw();\r\n        \r\n        funder.principal = 0;\r\n        totalPrincipal -= amount;\r\n        _removeFunderFromList(msg.sender);\r\n        \r\n        stablecoin.safeTransfer(msg.sender, amount);\r\n        emit Withdrawn(msg.sender, amount, 0);\r\n    }\r\n\r\n    /// @notice Withdraw a specific amount of principal\r\n    /// @param amount The amount to withdraw\r\n    function withdrawPrincipalAmount(uint256 amount) external updateFunder(msg.sender) {\r\n        Funder storage funder = funders[msg.sender];\r\n        if (amount == 0) revert ZeroAmount();\r\n        if (amount > funder.principal) revert InsufficientFunds();\r\n\r\n        funder.principal -= amount;\r\n        totalPrincipal -= amount;\r\n        stablecoin.safeTransfer(msg.sender, amount);\r\n        emit Withdrawn(msg.sender, amount, 0);\r\n    }\r\n\r\n    /// @notice Withdraw only accrued interest (does not touch principal)\r\n    function withdrawInterest() external updateFunder(msg.sender) {\r\n        Funder storage funder = funders[msg.sender];\r\n        uint256 interest = funder.pendingInterest;\r\n        require(interest > 0, \"No interest to withdraw\");\r\n        \r\n        funder.pendingInterest = 0;\r\n        stablecoin.safeTransfer(msg.sender, interest);\r\n        emit Withdrawn(msg.sender, 0, interest);\r\n    }\r\n\r\n    /// @notice Backend-authorized: Create a loan for a borrower\r\n    /// @param borrower The address of the borrower\r\n    /// @param amount The amount to borrow\r\n    function requestFundingForBorrower(address borrower, uint256 amount, uint256 expectedAmount) external onlyBackend {\r\n        if (activeLoanOf[borrower] != 0) revert AlreadyHasActiveLoan();\r\n        if (amount == 0) revert ZeroAmount();\r\n        if (amount > totalPrincipal) revert InsufficientPoolFunds();\r\n        if (expectedAmount < amount) revert ExpectedAmountLessThanAmount();\r\n        \r\n        totalPrincipal -= amount;\r\n        nextLoanId++;\r\n        \r\n        loans[nextLoanId] = Loan({\r\n            amount: amount,\r\n            borrower: borrower,\r\n            repaid: false,\r\n            principalAtCreation: totalPrincipal + amount,\r\n            remainingAmount: expectedAmount,\r\n            totalRepaid: 0\r\n        });\r\n        \r\n        activeLoanOf[borrower] = nextLoanId;\r\n        stablecoin.safeTransfer(borrower, amount);\r\n        \r\n        emit Funded(borrower, amount, nextLoanId);\r\n    }\r\n\r\n    /// @notice Repay a loan in installments\r\n    /// @param loanId_ The ID of the loan to repay\r\n    /// @param installmentAmount The amount to pay in this installment\r\n    function repayAmountForLoan(uint256 loanId_, uint256 installmentAmount) external onlyBackend {\r\n        Loan storage loan = loans[loanId_];\r\n        if (loan.repaid) revert LoanAlreadyRepaid();\r\n        if (installmentAmount == 0) revert ZeroAmount();\r\n        if (installmentAmount > loan.remainingAmount) revert InvalidInstallmentAmount();\r\n        \r\n        stablecoin.safeTransferFrom(usdcWallet, address(this), installmentAmount);\r\n        \r\n        loan.totalRepaid += installmentAmount;\r\n        loan.remainingAmount -= installmentAmount;\r\n        \r\n        // Check if loan is fully repaid\r\n        if (loan.remainingAmount == 0) {\r\n            loan.repaid = true;\r\n            activeLoanOf[loan.borrower] = 0;\r\n            totalPrincipal += loan.amount;\r\n            \r\n            // Calculate total interest paid\r\n            uint256 totalInterest = loan.totalRepaid - loan.amount;\r\n            if (totalInterest > 0) {\r\n                _distributeInterest(totalInterest, loan.principalAtCreation);\r\n            }\r\n            \r\n            emit Repaid(loan.borrower, loan.amount, totalInterest, loanId_);\r\n        } else {\r\n            emit InstallmentPaid(loan.borrower, installmentAmount, loan.remainingAmount, loanId_);\r\n        }\r\n    }\r\n\r\n    /// @notice Get funder info\r\n    /// @param funderAddr The address of the funder\r\n    /// @return principal The funder's principal\r\n    /// @return pendingInterest The funder's pending interest\r\n    /// @return interestDebt The funder's interest debt\r\n    function getFunderInfo(address funderAddr) external view returns (uint256 principal, uint256 pendingInterest, uint256 interestDebt) {\r\n        Funder storage funder = funders[funderAddr];\r\n        uint256 upToDatePending = funder.pendingInterest;\r\n        \r\n        if (funder.principal > 0) {\r\n            uint256 accrued = (funder.principal * (accInterestPerShare - funder.interestDebt)) / ACC_PRECISION;\r\n            upToDatePending += accrued;\r\n        }\r\n        \r\n        return (funder.principal, upToDatePending, funder.interestDebt);\r\n    }\r\n\r\n    /// @notice Returns true if a loan can be requested for the given amount by the sender\r\n    /// @param amount The amount to check\r\n    /// @return True if funding can be requested\r\n    function canRequestFunding(uint256 amount) external view returns (bool) {\r\n        return activeLoanOf[msg.sender] == 0 && amount > 0 && amount <= totalPrincipal;\r\n    }\r\n\r\n    /// @notice Get loan information including remaining amount\r\n    /// @param loanId_ The ID of the loan\r\n    /// @return amount The original loan amount\r\n    /// @return borrower The borrower address\r\n    /// @return repaid Whether the loan is fully repaid\r\n    /// @return remainingAmount The remaining amount to be repaid\r\n    /// @return totalRepaid The total amount repaid so far\r\n    function getLoanInfo(uint256 loanId_) external view returns (\r\n        uint256 amount,\r\n        address borrower,\r\n        bool repaid,\r\n        uint256 remainingAmount,\r\n        uint256 totalRepaid\r\n    ) {\r\n        Loan storage loan = loans[loanId_];\r\n        return (loan.amount, loan.borrower, loan.repaid, loan.remainingAmount, loan.totalRepaid);\r\n    }\r\n\r\n    /// @dev Check if an address is a backend\r\n    /// @param addr The address to check\r\n    /// @return True if the address is a backend\r\n    function _isBackend(address addr) internal view returns (bool) {\r\n        for (uint256 i = 0; i < backends.length; i++) {\r\n            if (backends[i] == addr) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @dev Update a funder's accrued interest\r\n    /// @param funderAddr The address of the funder\r\n    function _updateFunderInterest(address funderAddr) internal {\r\n        Funder storage funder = funders[funderAddr];\r\n        if (funder.principal > 0) {\r\n            uint256 accrued = (funder.principal * (accInterestPerShare - funder.interestDebt)) / ACC_PRECISION;\r\n            funder.pendingInterest += accrued;\r\n        }\r\n        funder.interestDebt = accInterestPerShare;\r\n    }\r\n\r\n    /// @dev Distribute interest to all funders\r\n    /// @param interest The interest amount to distribute\r\n    /// @param principalAtCreation The total principal when the loan was created\r\n    function _distributeInterest(uint256 interest, uint256 principalAtCreation) internal {\r\n        if (principalAtCreation > 0) {\r\n            accInterestPerShare += (interest * ACC_PRECISION) / principalAtCreation;\r\n        }\r\n    }\r\n\r\n    /// @dev Remove a funder from the funderList\r\n    /// @param funderAddr The address of the funder to remove\r\n    function _removeFunderFromList(address funderAddr) internal {\r\n        for (uint256 i = 0; i < funderList.length; i++) {\r\n            if (funderList[i] == funderAddr) {\r\n                funderList[i] = funderList[funderList.length - 1];\r\n                funderList.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getLenderInfo(address lenderAddr) external view returns (uint256 principal, uint256 pendingInterest, uint256 interestDebt) {\r\n        Funder storage lender = funders[lenderAddr];\r\n        return (lender.principal, lender.pendingInterest, lender.interestDebt);\r\n    }\r\n\r\n    function getBorrowerInfo(address borrowerAddr) external view returns (uint256 principal, uint256 pendingInterest, uint256 interestDebt) {\r\n        Loan storage loan = loans[activeLoanOf[borrowerAddr]];\r\n        return (loan.amount, loan.totalRepaid, loan.remainingAmount);\r\n    }\r\n\r\n    /// @notice Get the active loan ID for a borrower\r\n    /// @param borrowerAddr The address of the borrower\r\n    /// @return The active loan ID, or 0 if no active loan\r\n    function getActiveLoanId(address borrowerAddr) external view returns (uint256) {\r\n        return activeLoanOf[borrowerAddr];\r\n    }\r\n}\r\n    "
      },
      "project/contracts/interfaces/IFundingPool.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.28;\r\n\r\n/// @title IFundingPool - Interface for FundingPool contract\r\ninterface IFundingPool {\r\n    function repayAmountForLoan(uint256 loanId_, uint256 installmentAmount) external;\r\n    \r\n    function setBackends(address[] calldata newBackends) external;\r\n    function getBackends() external view returns (address[] memory);\r\n\r\n    function setUsdcWallet(address newUsdcWallet) external;\r\n    \r\n    function depositPrincipal(uint256 amount) external;\r\n\r\n    function withdrawPrincipal() external;\r\n    function withdrawPrincipalAmount(uint256 amount) external;\r\n\r\n    function requestFundingForBorrower(address borrower, uint256 amount, uint256 expectedAmount) external;\r\n\r\n    function getLoanInfo(uint256 loanId_) external view returns (\r\n        uint256 amount,\r\n        address borrower,\r\n        bool repaid,\r\n        uint256 remainingAmount,\r\n        uint256 totalRepaid\r\n    );\r\n\r\n    function getFunderInfo(address funderAddr) external view returns (uint256 principal, uint256 pendingInterest, uint256 interestDebt);\r\n\r\n    function canRequestFunding(uint256 amount) external view returns (bool);\r\n\r\n    function withdrawInterest() external;\r\n} "
      },
      "project/contracts/modules/FundingPoolErrors.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.28;\r\n\r\nerror ZeroAmount();\r\nerror NoActiveLoan();\r\nerror NoInterestPaid();\r\nerror InsufficientFunds();\r\nerror NothingToWithdraw();\r\nerror LoanAlreadyRepaid();\r\nerror AlreadyHasActiveLoan();\r\nerror InsufficientPoolFunds();\r\nerror InvalidInstallmentAmount();\r\nerror ExpectedAmountLessThanAmount();"
      },
      "project/contracts/modules/FundingPoolEvents.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.28;\r\n\r\nevent Repaid(address indexed borrower, uint256 principal, uint256 interest, uint256 loanId);\r\nevent InstallmentPaid(address indexed borrower, uint256 installmentAmount, uint256 remainingAmount, uint256 loanId);\r\nevent Funded(address indexed borrower, uint256 amount, uint256 loanId);\r\nevent Deposited(address indexed funder, uint256 amount);\r\nevent Withdrawn(address indexed funder, uint256 amount, uint256 interest); "
      },
      "project/contracts/modules/FundingPoolStorage.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/// @title FundingPoolStorage - Storage layout for FundingPool\r\ncontract FundingPoolStorage {\r\n    /// @notice Information about a funder\r\n    struct Funder {\r\n        uint256 principal;         // Amount of stablecoin originally deposited by the funder and currently locked in the pool (excludes interest)\r\n        uint256 interestDebt;      // Interest per share already credited to this funder\r\n        uint256 pendingInterest;   // Interest accrued but not yet withdrawn\r\n    }\r\n\r\n    /// @notice Information about a loan\r\n    struct Loan {\r\n        uint256 amount;           // Amount borrowed\r\n        address borrower;         // Address of the borrower\r\n        bool repaid;              // Whether the loan has been repaid\r\n        uint256 principalAtCreation; // Total principal in pool when loan was created\r\n        uint256 remainingAmount;  // Remaining amount to be repaid\r\n        uint256 totalRepaid;      // Total amount repaid so far\r\n    }\r\n\r\n    // --- Storage Variables ---\r\n    address public usdcWallet; // The USDC wallet address used for repayments\r\n    address[] public backends; // List of authorized backend addresses\r\n\r\n    /// @notice The ERC20 stablecoin used for all operations\r\n    IERC20 public immutable stablecoin;\r\n\r\n    address public immutable deployer; // The contract deployer (can set backends)\r\n\r\n    // Maps loan ID to Loan struct. Stores all loans, both active and repaid.\r\n    mapping(uint256 => Loan) public loans;\r\n    // Maps funder address to Funder struct\r\n    mapping(address => Funder) public funders;\r\n    // Maps borrower address to their current active loan ID (0 if none). Used for O(1) lookup and enforcing one active loan per borrower.\r\n    mapping(address => uint256) public activeLoanOf;\r\n    // List of all funder addresses (addresses are removed when principal is zero)\r\n    address[] public funderList;\r\n\r\n    uint256 public nextLoanId; // Incremented for each new loan\r\n    uint256 public totalPrincipal; // Total principal locked in the pool\r\n    uint256 public accInterestPerShare; // Accumulated interest per principal (scaled by ACC_PRECISION)\r\n} "
      }
    }
  }
}